#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "../main/bigint/BigInt.h"
#include "../main/App.h"

class AppTest : public ::testing::Test {

};

TEST_F(AppTest, test_is_prime_small) {
  const int max = 10000;
  bool isNotPrime[max] = {1, 1, 0};
  for (int i = 2; i < max; ++i)
    if (!isNotPrime[i])
      for (int j = i * 2; j < max; j += i)
        isNotPrime[j] = true;

  for (int i = 0; i < max; i++)
    EXPECT_EQ(!isNotPrime[i], isPrime(BigInt(i)));
}

TEST_F(AppTest, test_is_prime_598_bit) {
  BigInt p1 = BigInt(
      "1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224075360211201138798713933576587897688144166224928474306394741243777678934248654852763217");
  BigInt p2 = BigInt(
      "1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224075360211201138798713933576587897688144166224928474306394741243777678934248654852763229");
  EXPECT_EQ(1, isPrime(p1));
  for (BigInt i = p1 + 1; i < p2; i++)
    EXPECT_EQ(0, isPrime(i));
  EXPECT_EQ(1, isPrime(p2));
}

TEST_F(AppTest, test_inverse) {
  BigInt p("8209");
  for (BigInt i = 1; i < p; i++) {
    BigInt j = inverse(i, p);
    EXPECT_EQ("1", ((i * j) % p).toDecimalString());
  }
}

TEST_F(AppTest, test_encryption_example_1) {
  eval("p=12369571528747655798110188786567180759626910465726920556567298659370399748072366507234899432827475865189642714067836207300153035059472237275816384410077871");
  eval("q=2065420353441994803054315079370635087865508423962173447811880044936318158815802774220405304957787464676771309034463560633713497474362222775683960029689473");
  eval("e=65537");
  EXPECT_EQ("Yes", eval("IsPPrime"));
  EXPECT_EQ("Yes", eval("IsQPrime"));
  EXPECT_EQ("25548364798832019218170326077010425733930233389897468141147917831084690989884562791601588954296621731652139141347541240725432606132471100644835778517336041031200174441223836394229943651678525471050219216183727749114047330431603023948126844573697946795476319956787513765533596926704755530772983549787878951983", eval("PrintN"));
  EXPECT_EQ("25548364798832019218170326077010425733930233389897468141147917831084690989884562791601588954296621731652139141347541240725432606132471100644835778517336026596208292251573235229726077713862677978631329527089723369935343023713696135778845389268960161532146453542764411465765663060172221696312932049443439184640", eval("PrintPhi"));
  EXPECT_EQ("25051719899710729069339146813050963409059898810366373119834423967819636191509401691818253978210229371822961344590338934536803264841097247978074700319812702399440521918349189245279566231685265955731649745935378380489722580113725907099133943430294137060596724659637599737926649148356615085679203385772673944833", eval("PrintD"));
  EXPECT_EQ("4397678428390379126255360246165021910057442267382175543246817108158797115317154540746718616555865161372450860559307149988169566508274711121236049281217144195628407516579953387138808449458611836421032431582081899650685651973204503916459595600207918950383877057152533041873901965623112895996177941667469292738", eval("EncryptPublic=88"));
  EXPECT_EQ("88", eval("EncryptPrivate=4397678428390379126255360246165021910057442267382175543246817108158797115317154540746718616555865161372450860559307149988169566508274711121236049281217144195628407516579953387138808449458611836421032431582081899650685651973204503916459595600207918950383877057152533041873901965623112895996177941667469292738"));
  EXPECT_EQ("21880230932604477992614117893862222757212287845281021154543717510642642365619523838019035747962755670112744108613949995939938709109560325465896091816053995698880564550411021131784018129301522482453764524425009272603306228293577801089684280984807415949225937675518051511432970692327336163089308396188679795011", eval("EncryptPrivate=11"));
  EXPECT_EQ("11", eval("EncryptPublic=21880230932604477992614117893862222757212287845281021154543717510642642365619523838019035747962755670112744108613949995939938709109560325465896091816053995698880564550411021131784018129301522482453764524425009272603306228293577801089684280984807415949225937675518051511432970692327336163089308396188679795011"));

}